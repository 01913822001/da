#!/usr/bin/ruby
# Oo
#                           wookay.noh at gmail.com

PASSED='passed'
ASSERTION_FAILED='Assertion failed'
EXPECTED='Expected'
GOT='Got'
OO_VERSION=0.1
RULES_POL='rules/.pol'
RULES_PRI='rules/.pri'

class Rule
  attr_accessor :ter, :pol
  def initialize ter
    @ter = ter
    @pol = []
  end
  def pol_push pri, ter
    @pol.push [pri, ter]
    text = []
    for a,b in @pol
      text.push %Q(["#{a}", "#{b}"])
    end
    open(RULES_POL, 'w') do |f|
      f.write %Q([#{text.join","}])
    end
  end
  def lang_ext
    case @ter 
    when /rb$/
      'ruby'
    when /gp$/
      'gp -q'
    when /py$/
      'python'
    end 
  end
  def call pri
    if @ter and File.exists? @ter
      open(RULES_PRI, 'w') do |f|
        f.write %Q("#{pri}")
      end
      result = `#{lang_ext} #{@ter} #{pri} 2> /dev/null`
    end
    if result and not result.empty?
      result
    else
      pri
    end
  end
end

class Oo
  def initialize
    @hash = {}
    @rule = Rule.new nil
  end
  def value_in_rule pri
    return if not @rule.ter
    value = @rule.call pri
    value if value
  end
  def ooval obj
    if @hash.has_key? obj
      @hash[obj]
    else
      value = value_in_rule obj
      if value
        value
      elsif @hash.invert.has_key? obj
        @hash.invert[obj]
      else
        obj
      end
    end
  end
  def run text
    text.split("\n").each do |line|
      next if line.strip[0,1]=='#'
      m = line.match /(.*)(은|는|일때) (.*)/
      if m
        pri = m[1]
        seg = m[2]
        ter = m[3]
        case pri
        when /규칙/
          @rule.ter = ter
        else
          q = ter.match /(.*)\?$/
          if q
            ter_q = q[1]
            case ter_q
            when /뭐/
              puts ooval(pri)
            else
              assert_equal ter_q, ooval(pri), ter_q
            end
          else
            @rule.pol_push pri, ter
            @hash[pri] = ter
          end
        end
      else
        @rule.pol = []
      end
    end
  end
  def fun file
    run open(file).read if File.exists? file.to_s
  end
end

def assert_equal expected, got, passed
  puts expected == got ?
    "#{PASSED}: #{passed}" :
    "#{ASSERTION_FAILED}\n#{EXPECTED}: #{expected}\n#{GOT}: #{got}"
end

case ARGV
when [], %w{--help}
  puts <<EOF
Usage: Oo [programfile]
  --copyright     print the copyright
  --version       print the version
EOF
when %w{--copyright}
  puts "Oo - Copyright (C) 2008 Woo-Kyoung Noh"
when %w{--version}
  puts "Oo #{OO_VERSION}"
else
  oo = Oo.new
  oo.fun ARGV.to_s
end
